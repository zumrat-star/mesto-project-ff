{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js","webpack://mesto-project-ff/./src/components/api.js"],"sourcesContent":["// Функции управления попапами\nconst openPopup = (popup) => {\n  popup.classList.add(\"popup_is-opened\");\n  document.addEventListener(\"keydown\", handleEscape);\n  popup.addEventListener(\"mousedown\", handleOverlay);\n};\n\nconst closePopup = (popup) => {\n  popup.classList.remove(\"popup_is-opened\");\n  document.removeEventListener(\"keydown\", handleEscape);\n  popup.removeEventListener(\"mousedown\", handleOverlay);\n};\n\n// Закрытие по Esc\nconst handleEscape = (evt) => {\n  if (evt.key === \"Escape\") {\n    const openedPopup = document.querySelector(\".popup_is-opened\");\n    closePopup(openedPopup);\n  }\n};\n\n// Закрытие по клику на оверлей\nconst handleOverlay = (evt) => {\n  if (evt.target === evt.currentTarget) {\n    closePopup(evt.currentTarget);\n  }\n};\n\nexport { openPopup, closePopup};\n","// @todo: Темплейт карточки\nconst cardTemplate = document.querySelector(\"#card-template\").content;\n// @todo: Функция создания карточки\nconst createCard = (options) => {\n  const {\n    cardData,\n    deleteCallback,\n    likeCallback,\n    imageClickCallback,\n    currentUserId,\n  } = options;\n\n  const cardElement = cardTemplate.cloneNode(true).querySelector(\".card\");\n  const cardImage = cardElement.querySelector(\".card__image\");\n  const cardTitle = cardElement.querySelector(\".card__title\");\n  const deleteButton = cardElement.querySelector(\".card__delete-button\");\n  const likeButton = cardElement.querySelector(\".card__like-button\");\n  const likeCountElement = cardElement.querySelector(\".card__like-count\");\n\n  cardImage.src = cardData.link;\n  cardTitle.textContent = cardData.name;\n  cardImage.alt = cardData.name;\n\n  // Устанавливаем количество лайков\n  likeCountElement.textContent = cardData.likes.length || 0;\n\n  // Показываем иконку удаления только для своих карточек\n  if (cardData.owner._id !== currentUserId) {\n    deleteButton.remove();\n  } else {\n    deleteButton.addEventListener(\"click\", () => {\n      deleteCallback(cardElement, cardData._id);\n    });\n  }\n\n  // Проверяем, лайкнул ли текущий пользователь\n  const isLiked = cardData.likes.some((like) => like._id === currentUserId);\n  if (isLiked) {\n    likeButton.classList.add(\"card__like-button_is-active\");\n  }\n\n  // Обработчики событий\n  likeButton.addEventListener(\"click\", () => {\n    likeCallback(cardData._id, isLiked, likeButton, likeCountElement);\n  });\n  cardImage.addEventListener(\"click\", () => imageClickCallback(cardData));\n  return cardElement;\n};\n\nexport { createCard };\n","// Функция показа ошибки валидации\nconst showInputError = (form, input, errorMessage, settings) => {\n  const errorElement = form.querySelector(`#${input.id}-error`);\n  input.classList.add(settings.inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(settings.errorClass);\n};\n\n// Функция скрытия ошибки валидации\nconst hideInputError = (form, input, settings) => {\n  const errorElement = form.querySelector(`#${input.id}-error`);\n  input.classList.remove(settings.inputErrorClass);\n  errorElement.classList.remove(settings.errorClass);\n  errorElement.textContent = \"\";\n};\n\n// Проверка валидности поля\nconst checkInputValidity = (form, input, settings) => {\n  input.setCustomValidity(\"\");\n\n  // Проверка кастомного паттерна\n  if (input.dataset.pattern) {\n    const regex = new RegExp(input.dataset.pattern);\n    if (input.value && !regex.test(input.value)) {\n      input.setCustomValidity(input.dataset.errorMessage);\n    }\n  }\n\n  // Общая проверка валидности\n  if (!input.validity.valid) {\n    showInputError(form, input, input.validationMessage, settings);\n  } else {\n    hideInputError(form, input, settings);\n  }\n};\n\n// Переключение состояния кнопки\nconst toggleButtonState = (inputs, button, settings) => {\n  const hasInvalidInput = inputs.some((input) => !input.validity.valid);\n  button.disabled = hasInvalidInput;\n  button.classList.toggle(settings.inactiveButtonClass, hasInvalidInput);\n};\n\n// Установка обработчиков событий для формы\nconst setEventListeners = (form, settings) => {\n  const inputs = Array.from(form.querySelectorAll(settings.inputSelector));\n  const button = form.querySelector(settings.submitButtonSelector);\n\n  // Инициализация состояния кнопки\n  toggleButtonState(inputs, button, settings);\n\n  // Обработчики для каждого поля ввода\n  inputs.forEach((input) => {\n    input.addEventListener(\"input\", () => {\n      checkInputValidity(form, input, settings);\n      toggleButtonState(inputs, button, settings);\n    });\n  });\n};\n\n// Включение валидации всех форм\nexport const enableValidation = (settings) => {\n  const forms = Array.from(document.querySelectorAll(settings.formSelector));\n  forms.forEach((form) => setEventListeners(form, settings));\n};\n\n// Очистка ошибок валидации\nexport const clearValidation = (form, settings) => {\n  const inputs = Array.from(form.querySelectorAll(settings.inputSelector));\n  const button = form.querySelector(settings.submitButtonSelector);\n\n  inputs.forEach((input) => {\n    input.setCustomValidity(\"\");\n    hideInputError(form, input, settings);\n  });\n\n  toggleButtonState(inputs, button, settings);\n};\n","import \"./pages/index.css\";\nimport { openPopup, closePopup } from \"./components/modal.js\";\nimport { createCard } from \"./components/card.js\";\nimport { enableValidation, clearValidation } from \"./components/validation.js\";\nimport { Api } from \"./components/api.js\";\n\n// Конфигурация API\nconst apiConfig = {\n  baseUrl: \"https://mesto.nomoreparties.co/v1/wff-cohort-41\",\n  headers: {\n    authorization: \"a866e48f-2a08-45a7-a25c-53920d318a13\",\n    \"Content-Type\": \"application/json\",\n  },\n};\n\nconst api = new Api(apiConfig);\n\n// Конфигурация валидации\nconst validationConfig = {\n  formSelector: \".popup__form\",\n  inputSelector: \".popup__input\",\n  submitButtonSelector: \".popup__button\",\n  inactiveButtonClass: \"popup__button_disabled\",\n  inputErrorClass: \"popup__input_type_error\",\n  errorClass: \"popup__error_visible\",\n};\n\n// Тексты кнопок для разных состояний\nconst BUTTON_TEXTS = {\n  SAVE: \"Сохранить\",\n  CREATE: \"Создать\",\n  CONFIRM: \"Да\",\n  SAVING: \"Сохранение...\",\n  CREATING: \"Создание...\",\n  CONFIRMING: \"Удаление...\",\n};\n\n// DOM элементы\nconst elements = {\n  placesList: document.querySelector(\".places__list\"),\n  imagePopup: document.querySelector(\".popup_type_image\"),\n  popupImage: document.querySelector(\".popup_type_image .popup__image\"),\n  popupCaption: document.querySelector(\".popup_type_image .popup__caption\"),\n  profileName: document.querySelector(\".profile__title\"),\n  profileJob: document.querySelector(\".profile__description\"),\n  profileAvatar: document.querySelector(\".profile__image\"),\n  editForm: document.forms[\"edit-profile\"],\n  nameInput: document.querySelector(\".popup__input_type_name\"),\n  jobInput: document.querySelector(\".popup__input_type_description\"),\n  editPopup: document.querySelector(\".popup_type_edit\"),\n  deleteConfirmationPopup: document.querySelector(\".popup_type_confirm-delete\"),\n  deleteForm: document.forms[\"confirm-delete\"],\n  editAvatarPopup: document.querySelector(\".popup_type_edit-avatar\"),\n  editAvatarForm: document.forms[\"edit-avatar\"],\n  avatarInput: document.forms[\"edit-avatar\"].elements.avatar,\n  avatarEditButton: document.querySelector(\".profile__avatar-edit-button\"),\n  cardForm: document.forms[\"new-place\"],\n  newCardPopup: document.querySelector(\".popup_type_new-card\"),\n  addButton: document.querySelector(\".profile__add-button\"),\n  editButton: document.querySelector(\".profile__edit-button\"),\n};\n\n// Состояние приложения\nlet currentUserId = null;\nlet cardToDeleteId = null;\nlet cardElementToDelete = null;\n\n// Инициализация приложения\nconst initializeApp = () => {\n  enableValidation(validationConfig);\n  setupEventListeners();\n  loadInitialData();\n};\n\n// ====================== Функции работы с данными ======================\n\n// Загрузка данных пользователя и карточек\nconst loadInitialData = () => {\n  Promise.all([api.getUserInfo(), api.getInitialCards()])\n    .then(([userData, cards]) => {\n      currentUserId = userData._id;\n      updateProfileInfo(userData);\n      renderInitialCards(cards);\n    })\n    .catch((error) => {\n      console.error(\"Ошибка загрузки данных:\", error);\n    });\n};\n\n// Обновление информации профиля\nconst updateProfileInfo = (userData) => {\n  elements.profileName.textContent = userData.name;\n  elements.profileJob.textContent = userData.about;\n  elements.profileAvatar.style.backgroundImage = `url(${userData.avatar})`;\n};\n\n// Отрисовка карточек\nconst renderInitialCards = (cards) => {\n  elements.placesList.innerHTML = \"\";\n\n  cards.forEach((cardData) => {\n    const cardElement = createCard({\n      cardData,\n      currentUserId,\n      deleteCallback: deleteCard,\n      likeCallback: handleLikeClick,\n      imageClickCallback: openImagePopup,\n    });\n    elements.placesList.append(cardElement);\n  });\n};\n\n// ====================== Функции работы с UI ======================\n\n// Открытие попапа с изображением\nconst openImagePopup = (cardData) => {\n  elements.popupImage.src = cardData.link;\n  elements.popupImage.alt = cardData.name;\n  elements.popupCaption.textContent = cardData.name;\n  openPopup(elements.imagePopup);\n};\n\n// Открытие попапа редактирования профиля\nconst openEditPopup = () => {\n  elements.nameInput.value = elements.profileName.textContent;\n  elements.jobInput.value = elements.profileJob.textContent;\n  clearValidation(elements.editForm, validationConfig);\n  openPopup(elements.editPopup);\n};\n\n// Открытие попапа редактирования аватара\nconst openEditAvatarPopup = () => {\n  elements.editAvatarForm.reset();\n  clearValidation(elements.editAvatarForm, validationConfig);\n  openPopup(elements.editAvatarPopup);\n};\n\n// Открытие попапа подтверждения удаления\nconst openDeleteConfirmationPopup = (cardElement, cardId) => {\n  cardToDeleteId = cardId;\n  cardElementToDelete = cardElement;\n  openPopup(elements.deleteConfirmationPopup);\n};\n\n// ====================== Обработчики событий ======================\n\n// Обработчик лайков\nconst handleLikeClick = (cardId, isLiked, likeButton, likeCountElement) => {\n  let promise;\n  if (isLiked) {\n    promise = api.unlikeCard(cardId);\n  } else {\n    promise = api.likeCard(cardId);\n  }\n\n  promise\n    .then((updatedCard) => {\n      likeCountElement.textContent = updatedCard.likes.length;\n      likeButton.classList.toggle(\"card__like-button_is-active\", !isLiked);\n    })\n    .catch(console.error);\n};\n\n// Обработчик удаления карточки\nconst deleteCard = (cardElement, cardId) => {\n  openDeleteConfirmationPopup(cardElement, cardId);\n};\n\n// Обработчик отправки формы профиля\nconst handleProfileFormSubmit = (evt) => {\n  evt.preventDefault();\n\n  const submitButton = elements.editForm.querySelector(\".popup__button\");\n  const initialText = submitButton.textContent;\n  submitButton.textContent = BUTTON_TEXTS.SAVING;\n  submitButton.disabled = true;\n\n  const name = elements.editForm.elements.name.value;\n  const about = elements.editForm.elements.description.value;\n\n  api\n    .updateUserInfo({ name, about })\n    .then((userData) => {\n      updateProfileInfo(userData);\n      closePopup(elements.editPopup);\n    })\n    .catch((error) => {\n      console.error(\"Ошибка обновления профиля:\", error);\n    })\n    .finally(() => {\n      submitButton.textContent = initialText;\n      submitButton.disabled = false;\n    });\n};\n\n// Обработчик отправки формы аватара\nconst handleEditAvatarFormSubmit = (evt) => {\n  evt.preventDefault();\n\n  const submitButton = elements.editAvatarForm.querySelector(\".popup__button\");\n  const initialText = submitButton.textContent;\n  submitButton.textContent = BUTTON_TEXTS.SAVING;\n  submitButton.disabled = true;\n\n  const avatarUrl = elements.avatarInput.value;\n\n  api\n    .updateUserAvatar(avatarUrl)\n    .then((userData) => {\n      elements.profileAvatar.style.backgroundImage = `url(${userData.avatar})`;\n      closePopup(elements.editAvatarPopup);\n    })\n    .catch((err) => {\n      console.error(\"Ошибка обновления аватара:\", err);\n    })\n    .finally(() => {\n      submitButton.textContent = initialText;\n      submitButton.disabled = false;\n    });\n};\n\n// Обработчик отправки формы карточки\nconst handleCardFormSubmit = (evt) => {\n  evt.preventDefault();\n\n  const submitButton = elements.cardForm.querySelector(\".popup__button\");\n  const initialText = submitButton.textContent;\n  submitButton.textContent = BUTTON_TEXTS.CREATING;\n  submitButton.disabled = true;\n\n  const placeName = elements.cardForm.elements[\"place-name\"].value;\n  const link = elements.cardForm.elements.link.value;\n\n  api\n    .addCard({ name: placeName, link })\n    .then((cardData) => {\n      const newCard = createCard({\n        cardData,\n        deleteCallback: deleteCard,\n        likeCallback: handleLikeClick,\n        imageClickCallback: openImagePopup,\n        currentUserId,\n      });\n\n      elements.placesList.prepend(newCard);\n      closePopup(elements.newCardPopup);\n      elements.cardForm.reset();\n    })\n    .catch((error) => {\n      console.error(\"Ошибка добавления карточки:\", error);\n    })\n    .finally(() => {\n      submitButton.textContent = initialText;\n      submitButton.disabled = false;\n    });\n};\n\n// Обработчик подтверждения удаления\nconst handleDeleteConfirmSubmit = (evt) => {\n  evt.preventDefault();\n\n  const submitButton = elements.deleteForm.querySelector(\".popup__button\");\n  const initialText = submitButton.textContent;\n  submitButton.textContent = BUTTON_TEXTS.CONFIRMING;\n  submitButton.disabled = true;\n\n  api\n    .deleteCard(cardToDeleteId)\n    .then(() => {\n      cardElementToDelete.remove();\n      closePopup(elements.deleteConfirmationPopup);\n    })\n    .catch((err) => {\n      console.error(\"Ошибка удаления карточки:\", err);\n    })\n    .finally(() => {\n      submitButton.textContent = initialText;\n      submitButton.disabled = false;\n    });\n};\n\n// ====================== Настройка обработчиков событий ======================\n\nconst setupEventListeners = () => {\n  // Кнопки открытия попапов\n  elements.avatarEditButton.addEventListener(\"click\", openEditAvatarPopup);\n  elements.editButton.addEventListener(\"click\", openEditPopup);\n  elements.addButton.addEventListener(\"click\", () => {\n    elements.cardForm.reset();\n    clearValidation(elements.cardForm, validationConfig);\n    openPopup(elements.newCardPopup);\n  });\n\n  // Обработчики форм\n  elements.editForm.addEventListener(\"submit\", handleProfileFormSubmit);\n  elements.editAvatarForm.addEventListener(\"submit\", handleEditAvatarFormSubmit);\n  elements.cardForm.addEventListener(\"submit\", handleCardFormSubmit);\n  elements.deleteForm.addEventListener(\"submit\", handleDeleteConfirmSubmit);\n\n  // Закрытие попапов\n  document.querySelectorAll(\".popup__close\").forEach((button) => {\n    const popup = button.closest(\".popup\");\n    button.addEventListener(\"click\", () => closePopup(popup));\n  });\n\n  // Закрытие по клику на оверлей\n  document.querySelectorAll(\".popup\").forEach((popup) => {\n    popup.addEventListener(\"mousedown\", (evt) => {\n      if (evt.target === popup) {\n        closePopup(popup);\n      }\n    });\n  });\n};\n\n// Запуск приложения\ndocument.addEventListener(\"DOMContentLoaded\", initializeApp);\n","export class Api {\n  constructor(config) {\n    this._baseUrl = config.baseUrl;\n    this._headers = config.headers;\n  }\n\n  // Проверка ответа сервера (стрелочная функция)\n  _checkResponse = (res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  };\n\n  // Загрузка информации о пользователе\n  getUserInfo = () => {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    }).then(this._checkResponse);\n  };\n\n  // Загрузка начальных карточек\n  getInitialCards = () => {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n    }).then(this._checkResponse);\n  };\n\n  // Обновление данных пользователя\n  updateUserInfo = (data) => {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then(this._checkResponse);\n  };\n\n  // Добавление новых карточек\n  addCard = (data) => {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then(this._checkResponse);\n  };\n\n  // Постановка лайка\n  likeCard = (cardId) => {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: \"PUT\",\n      headers: this._headers,\n    }).then(this._checkResponse);\n  };\n\n  // Снятие лайка\n  unlikeCard = (cardId) => {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then(this._checkResponse);\n  };\n\n  // Удаление карточки\n  deleteCard = (cardId) => {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then(this._checkResponse);\n  };\n\n  // Обновление аватара\n  updateUserAvatar = (avatarUrl) => {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatarUrl,\n      }),\n    }).then(this._checkResponse);\n  };\n}\n"],"names":["openPopup","popup","classList","add","document","addEventListener","handleEscape","handleOverlay","closePopup","remove","removeEventListener","evt","key","openedPopup","querySelector","target","currentTarget","cardTemplate","content","createCard","options","cardData","deleteCallback","likeCallback","imageClickCallback","currentUserId","cardElement","cloneNode","cardImage","cardTitle","deleteButton","likeButton","likeCountElement","src","link","textContent","name","alt","likes","length","owner","_id","isLiked","some","like","hideInputError","form","input","settings","errorElement","concat","id","inputErrorClass","errorClass","toggleButtonState","inputs","button","hasInvalidInput","validity","valid","disabled","toggle","inactiveButtonClass","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","setCustomValidity","api","_createClass","Api","config","_this","_classCallCheck","_defineProperty","res","ok","json","Promise","reject","status","fetch","_baseUrl","headers","_headers","then","_checkResponse","data","method","body","JSON","stringify","about","cardId","avatarUrl","avatar","this","baseUrl","authorization","validationConfig","formSelector","BUTTON_TEXTS","elements","placesList","imagePopup","popupImage","popupCaption","profileName","profileJob","profileAvatar","editForm","forms","nameInput","jobInput","editPopup","deleteConfirmationPopup","deleteForm","editAvatarPopup","editAvatarForm","avatarInput","avatarEditButton","cardForm","newCardPopup","addButton","editButton","cardToDeleteId","cardElementToDelete","loadInitialData","all","getUserInfo","getInitialCards","_ref","_ref2","userData","cards","updateProfileInfo","renderInitialCards","catch","error","console","style","backgroundImage","innerHTML","deleteCard","handleLikeClick","openImagePopup","append","openEditPopup","value","openEditAvatarPopup","reset","unlikeCard","likeCard","updatedCard","openDeleteConfirmationPopup","handleProfileFormSubmit","preventDefault","submitButton","initialText","description","updateUserInfo","finally","handleEditAvatarFormSubmit","updateUserAvatar","err","handleCardFormSubmit","placeName","addCard","newCard","prepend","handleDeleteConfirmSubmit","dataset","pattern","regex","RegExp","test","errorMessage","showInputError","validationMessage","checkInputValidity","setEventListeners","closest"],"sourceRoot":""}